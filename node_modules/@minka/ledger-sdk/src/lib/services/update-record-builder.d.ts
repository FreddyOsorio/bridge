import { JwtConfig, LedgerMeta, LedgerRecord } from '@minka/types';
import { BaseRecordResponse } from '../types/record-response';
import { BaseRecordBuilder } from './base-record-builder';
import { PartialDeep } from 'type-fest';
export declare type UpdateRecordHandler<T, R, M extends LedgerMeta = LedgerMeta> = (record: LedgerRecord<T, M>, authParams: JwtConfig) => Promise<R>;
export declare class UpdateRecordBuilder<T, R extends BaseRecordResponse<T>, M extends LedgerMeta = LedgerMeta> extends BaseRecordBuilder<T, M> {
    protected updateRecord: UpdateRecordHandler<T, R, M>;
    constructor(updateRecord: UpdateRecordHandler<T, R, M>);
    init(record: Partial<LedgerRecord<T, M>>): this;
    data(data: PartialDeep<T>, replace?: boolean): this;
    protected deepRemoveNull(object: any): any;
    send(): Promise<R>;
}
