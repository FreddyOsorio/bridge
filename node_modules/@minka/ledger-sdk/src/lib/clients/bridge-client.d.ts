import { JwtConfig, LedgerHandle, LedgerList, LedgerRecord, LedgerBridge } from '@minka/types';
import { AxiosResponse } from 'axios';
import { CreateRecordBuilder } from '../services/create-record-builder';
import { UpdateRecordBuilder } from '../services/update-record-builder';
import { LedgerListParams } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseRecordResponse } from '../types/record-response';
import { BaseClient } from './base-client';
export declare class BridgeResponse extends BaseRecordResponse<LedgerBridge> {
    bridge: LedgerBridge;
    constructor(response: AxiosResponse<LedgerRecord<LedgerBridge>, LedgerRecord<LedgerBridge>>);
}
export declare class BridgesResponse extends BaseListResponse<LedgerBridge> {
    bridges: LedgerBridge[];
    constructor(response: AxiosResponse<LedgerList<LedgerBridge>, void>);
}
export declare class BridgeClient extends BaseClient {
    init(record?: Partial<LedgerRecord<LedgerBridge>>): CreateRecordBuilder<LedgerBridge, BridgeResponse, import("@minka/types").LedgerMeta>;
    from(record: LedgerRecord<LedgerBridge>): UpdateRecordBuilder<LedgerBridge, BridgeResponse, import("@minka/types").LedgerMeta>;
    read(handle: LedgerHandle, authParams?: Partial<JwtConfig>): Promise<BridgeResponse>;
    list(params?: LedgerListParams): Promise<BridgesResponse>;
}
