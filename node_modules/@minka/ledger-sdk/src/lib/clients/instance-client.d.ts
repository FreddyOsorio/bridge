import { JwtConfig, LedgerInstance, LedgerHandle, LedgerList, LedgerRecord } from '@minka/types';
import { AxiosResponse } from 'axios';
import { CreateRecordBuilder } from '../services/create-record-builder';
import { UpdateRecordBuilder } from '../services/update-record-builder';
import { LedgerListParams } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseRecordResponse } from '../types/record-response';
import { BaseClient } from './base-client';
export declare class InstanceResponse extends BaseRecordResponse<LedgerInstance> {
    instance: LedgerInstance;
    constructor(response: AxiosResponse<LedgerRecord<LedgerInstance>, LedgerRecord<LedgerInstance>>);
}
export declare class InstancesResponse extends BaseListResponse<LedgerInstance> {
    instances: LedgerInstance[];
    constructor(response: AxiosResponse<LedgerList<LedgerInstance>, void>);
}
export declare class InstanceClient extends BaseClient {
    init(record?: Partial<LedgerRecord<LedgerInstance>>): CreateRecordBuilder<LedgerInstance, InstanceResponse, import("@minka/types").LedgerMeta>;
    from(record: LedgerRecord<LedgerInstance>): UpdateRecordBuilder<LedgerInstance, InstanceResponse, import("@minka/types").LedgerMeta>;
    read(handle: LedgerHandle, authParams?: Partial<JwtConfig>): Promise<InstanceResponse>;
    list(params?: LedgerListParams): Promise<InstancesResponse>;
}
