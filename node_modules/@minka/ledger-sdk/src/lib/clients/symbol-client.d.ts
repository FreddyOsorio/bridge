import { JwtConfig, LedgerHandle, LedgerList, LedgerRecord, LedgerSymbol } from '@minka/types';
import { AxiosResponse } from 'axios';
import { CreateRecordBuilder } from '../services/create-record-builder';
import { UpdateRecordBuilder } from '../services/update-record-builder';
import { LedgerListParams } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseRecordResponse } from '../types/record-response';
import { BaseClient } from './base-client';
export declare class SymbolResponse extends BaseRecordResponse<LedgerSymbol> {
    symbol: LedgerSymbol;
    constructor(response: AxiosResponse<LedgerRecord<LedgerSymbol>, LedgerRecord<LedgerSymbol>>);
}
export declare class SymbolsResponse extends BaseListResponse<LedgerSymbol> {
    symbols: LedgerSymbol[];
    constructor(response: AxiosResponse<LedgerList<LedgerSymbol>, void>);
}
export declare class SymbolClient extends BaseClient {
    init(record?: Partial<LedgerRecord<LedgerSymbol>>): CreateRecordBuilder<LedgerSymbol, SymbolResponse, import("@minka/types").LedgerMeta>;
    from(record: LedgerRecord<LedgerSymbol>): UpdateRecordBuilder<LedgerSymbol, SymbolResponse, import("@minka/types").LedgerMeta>;
    read(handle: LedgerHandle, authParams?: Partial<JwtConfig>): Promise<SymbolResponse>;
    list(params?: LedgerListParams): Promise<SymbolsResponse>;
}
