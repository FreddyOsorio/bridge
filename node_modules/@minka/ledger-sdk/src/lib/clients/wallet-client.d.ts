import { JwtConfig, LedgerAddress, LedgerBalance, LedgerList, LedgerRecord, LedgerWallet } from '@minka/types';
import { AxiosResponse } from 'axios';
import { CreateRecordBuilder } from '../services/create-record-builder';
import { UpdateRecordBuilder } from '../services/update-record-builder';
import { LedgerListParams } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseRecordResponse } from '../types/record-response';
import { BaseClient } from './base-client';
export declare class WalletResponse extends BaseRecordResponse<LedgerWallet> {
    wallet: LedgerWallet;
    constructor(response: AxiosResponse<LedgerRecord<LedgerWallet>, LedgerRecord<LedgerWallet>>);
}
export declare class WalletsResponse extends BaseListResponse<LedgerWallet> {
    wallets: LedgerWallet[];
    constructor(response: AxiosResponse<LedgerList<LedgerWallet>, void>);
}
export declare class BalancesResponse extends BaseListResponse<LedgerBalance> {
    balances: LedgerBalance[];
    constructor(response: AxiosResponse<LedgerList<LedgerBalance>, void>);
}
export declare class WalletClient extends BaseClient {
    init(record?: Partial<LedgerRecord<LedgerWallet>>): CreateRecordBuilder<LedgerWallet, WalletResponse, import("@minka/types").LedgerMeta>;
    from(record: LedgerRecord<LedgerWallet>): UpdateRecordBuilder<LedgerWallet, WalletResponse, import("@minka/types").LedgerMeta>;
    read(handle: LedgerAddress, authParams?: Partial<JwtConfig>): Promise<WalletResponse>;
    list(params?: LedgerListParams): Promise<WalletsResponse>;
    getBalances(handle: LedgerAddress, params?: LedgerListParams): Promise<BalancesResponse>;
}
