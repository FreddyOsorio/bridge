import { IntentMeta, IntentRecord, JwtConfig, LedgerHandle, LedgerIntent, LedgerList } from '@minka/types';
import { AxiosResponse } from 'axios';
import { SignIntentBuilder } from '../services/sign-intent-builder';
import { CreateRecordBuilder } from '../services/create-record-builder';
import { LedgerListParams } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseRecordResponse } from '../types/record-response';
import { BaseClient } from './base-client';
export declare class IntentResponse extends BaseRecordResponse<LedgerIntent, IntentMeta> {
    intent: LedgerIntent;
    constructor(response: AxiosResponse<IntentRecord, IntentRecord>);
}
export declare class IntentsResponse extends BaseListResponse<LedgerIntent, IntentMeta> {
    intents: LedgerIntent[];
    constructor(response: AxiosResponse<LedgerList<LedgerIntent, IntentMeta>, void>);
}
export declare class IntentClient extends BaseClient {
    init(record?: Partial<IntentRecord>): CreateRecordBuilder<LedgerIntent, IntentResponse, IntentMeta>;
    from(record: IntentRecord): SignIntentBuilder;
    read(handle: LedgerHandle, authParams?: Partial<JwtConfig>): Promise<IntentResponse>;
    list(params?: LedgerListParams): Promise<IntentsResponse>;
}
