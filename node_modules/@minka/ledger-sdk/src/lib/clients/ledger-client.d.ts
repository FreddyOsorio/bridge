import { JwtConfig, Ledger, LedgerHandle, LedgerList, LedgerRecord } from '@minka/types';
import { AxiosResponse } from 'axios';
import { CreateRecordBuilder } from '../services/create-record-builder';
import { UpdateRecordBuilder } from '../services/update-record-builder';
import { LedgerListParams } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseRecordResponse } from '../types/record-response';
import { BaseClient } from './base-client';
export declare class LedgerResponse extends BaseRecordResponse<Ledger> {
    ledger: Ledger;
    constructor(response: AxiosResponse<LedgerRecord<Ledger>, LedgerRecord<Ledger>>);
}
export declare class LedgersResponse extends BaseListResponse<Ledger> {
    ledgers: Ledger[];
    constructor(response: AxiosResponse<LedgerList<Ledger>, void>);
}
export declare class LedgerClient extends BaseClient {
    init(record?: Partial<LedgerRecord<Ledger>>): CreateRecordBuilder<Ledger, LedgerResponse, import("@minka/types").LedgerMeta>;
    from(record: LedgerRecord<Ledger>): UpdateRecordBuilder<Ledger, LedgerResponse, import("@minka/types").LedgerMeta>;
    read(handle: LedgerHandle, authParams?: Partial<JwtConfig>): Promise<LedgerResponse>;
    list(params?: LedgerListParams): Promise<LedgersResponse>;
}
