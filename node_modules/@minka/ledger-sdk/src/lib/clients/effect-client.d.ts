import { JwtConfig, LedgerEffect, LedgerHandle, LedgerList, LedgerRecord } from '@minka/types';
import { AxiosResponse } from 'axios';
import { CreateRecordBuilder } from '../services/create-record-builder';
import { UpdateRecordBuilder } from '../services/update-record-builder';
import { LedgerListParams } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseRecordResponse } from '../types/record-response';
import { BaseClient } from './base-client';
export declare class EffectResponse extends BaseRecordResponse<LedgerEffect> {
    effect: LedgerEffect;
    constructor(response: AxiosResponse<LedgerRecord<LedgerEffect>, LedgerRecord<LedgerEffect>>);
}
export declare class EffectsResponse extends BaseListResponse<LedgerEffect> {
    effects: LedgerEffect[];
    constructor(response: AxiosResponse<LedgerList<LedgerEffect>, void>);
}
export declare class EffectClient extends BaseClient {
    init(record?: Partial<LedgerRecord<LedgerEffect>>): CreateRecordBuilder<LedgerEffect, EffectResponse, import("@minka/types").LedgerMeta>;
    from(record: LedgerRecord<LedgerEffect>): UpdateRecordBuilder<LedgerEffect, EffectResponse, import("@minka/types").LedgerMeta>;
    read(handle: LedgerHandle, authParams?: Partial<JwtConfig>): Promise<EffectResponse>;
    list(params?: LedgerListParams): Promise<EffectsResponse>;
}
