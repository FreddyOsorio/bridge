import { JwtConfig, LedgerHandle, LedgerList, LedgerRecord, LedgerSigner } from '@minka/types';
import { AxiosResponse } from 'axios';
import { SignerRecordBuilder } from '../services/signer-record-builder';
import { UpdateRecordBuilder } from '../services/update-record-builder';
import { LedgerListParams } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseRecordResponse } from '../types/record-response';
import { BaseClient } from './base-client';
export declare class SignerResponse extends BaseRecordResponse<LedgerSigner> {
    signer: LedgerSigner;
    constructor(response: AxiosResponse<LedgerRecord<LedgerSigner>, LedgerRecord<LedgerSigner>>);
}
export declare class SignersResponse extends BaseListResponse<LedgerSigner> {
    signers: LedgerSigner[];
    constructor(response: AxiosResponse<LedgerList<LedgerSigner>, void>);
}
export declare class SignerClient extends BaseClient {
    init(record?: Partial<LedgerRecord<LedgerSigner>>): SignerRecordBuilder;
    from(record: LedgerRecord<LedgerSigner>): UpdateRecordBuilder<LedgerSigner, SignerResponse, import("@minka/types").LedgerMeta>;
    read(handle: LedgerHandle, authParams?: Partial<JwtConfig>): Promise<SignerResponse>;
    list(params?: LedgerListParams): Promise<SignersResponse>;
}
