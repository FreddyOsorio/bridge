import { JwtConfig, LedgerHandle, LedgerPublic } from '@minka/types';
import { EffectClient } from './clients/effect-client';
import { LedgerClient } from './clients/ledger-client';
import { IntentClient } from './clients/intent-client';
import { SignerClient } from './clients/signer-client';
import { SymbolClient } from './clients/symbol-client';
import { WalletClient } from './clients/wallet-client';
import { BridgeClient } from './clients/bridge-client';
import { ProofVerificationClient } from './services/proof-verification-client';
export declare type SdkOptions = {
    secure?: JwtConfig;
    server: string;
    ledger?: string;
    timeout?: number;
    signer?: LedgerPublic;
    verifyResponseProofs?: boolean;
};
export declare type HandleHelper = {
    unique: (size?: number) => LedgerHandle;
};
export declare class LedgerSdk {
    private statusClient;
    ledger: LedgerClient;
    symbol: SymbolClient;
    bridge: BridgeClient;
    wallet: WalletClient;
    intent: IntentClient;
    signer: SignerClient;
    effect: EffectClient;
    handle: HandleHelper;
    private options;
    constructor(options: SdkOptions);
    setAuthParams(authParams: Partial<JwtConfig>): void;
    setActiveLedger(handle: string): void;
    status(): Promise<import("./clients/status-client").StatusResponse>;
    setSigner(signer: LedgerPublic): this;
    get proofs(): ProofVerificationClient;
}
